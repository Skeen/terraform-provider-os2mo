// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package os2mo

import (
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
)

// ITSystemFields includes the GraphQL fields of ITSystem requested by the fragment ITSystemFields.
// The GraphQL type's documentation follows.
//
// Systems that IT users are connected to
type ITSystemFields struct {
	// Name/titel of the itsystem.
	Name string `json:"name"`
	// The ITSystem type.
	System_type string `json:"system_type"`
	// The object type
	Type string `json:"type"`
	// Short, unique key.
	User_key string `json:"user_key"`
	// UUID to be created. Will be autogenerated if not specified.
	Uuid uuid.UUID `json:"uuid"`
}

// GetName returns ITSystemFields.Name, and is useful for accessing the field via an interface.
func (v *ITSystemFields) GetName() string { return v.Name }

// GetSystem_type returns ITSystemFields.System_type, and is useful for accessing the field via an interface.
func (v *ITSystemFields) GetSystem_type() string { return v.System_type }

// GetType returns ITSystemFields.Type, and is useful for accessing the field via an interface.
func (v *ITSystemFields) GetType() string { return v.Type }

// GetUser_key returns ITSystemFields.User_key, and is useful for accessing the field via an interface.
func (v *ITSystemFields) GetUser_key() string { return v.User_key }

// GetUuid returns ITSystemFields.Uuid, and is useful for accessing the field via an interface.
func (v *ITSystemFields) GetUuid() uuid.UUID { return v.Uuid }

// __getITSystemByUUIDInput is used internally by genqlient
type __getITSystemByUUIDInput struct {
	Uuid uuid.UUID `json:"uuid"`
}

// GetUuid returns __getITSystemByUUIDInput.Uuid, and is useful for accessing the field via an interface.
func (v *__getITSystemByUUIDInput) GetUuid() uuid.UUID { return v.Uuid }

// __getITSystemByUserKeyInput is used internally by genqlient
type __getITSystemByUserKeyInput struct {
	User_key string `json:"user_key"`
}

// GetUser_key returns __getITSystemByUserKeyInput.User_key, and is useful for accessing the field via an interface.
func (v *__getITSystemByUserKeyInput) GetUser_key() string { return v.User_key }

// getITSystemByUUIDItsystemsITSystem includes the requested fields of the GraphQL type ITSystem.
// The GraphQL type's documentation follows.
//
// Systems that IT users are connected to
type getITSystemByUUIDItsystemsITSystem struct {
	ITSystemFields `json:"-"`
}

// GetName returns getITSystemByUUIDItsystemsITSystem.Name, and is useful for accessing the field via an interface.
func (v *getITSystemByUUIDItsystemsITSystem) GetName() string { return v.ITSystemFields.Name }

// GetSystem_type returns getITSystemByUUIDItsystemsITSystem.System_type, and is useful for accessing the field via an interface.
func (v *getITSystemByUUIDItsystemsITSystem) GetSystem_type() string {
	return v.ITSystemFields.System_type
}

// GetType returns getITSystemByUUIDItsystemsITSystem.Type, and is useful for accessing the field via an interface.
func (v *getITSystemByUUIDItsystemsITSystem) GetType() string { return v.ITSystemFields.Type }

// GetUser_key returns getITSystemByUUIDItsystemsITSystem.User_key, and is useful for accessing the field via an interface.
func (v *getITSystemByUUIDItsystemsITSystem) GetUser_key() string { return v.ITSystemFields.User_key }

// GetUuid returns getITSystemByUUIDItsystemsITSystem.Uuid, and is useful for accessing the field via an interface.
func (v *getITSystemByUUIDItsystemsITSystem) GetUuid() uuid.UUID { return v.ITSystemFields.Uuid }

func (v *getITSystemByUUIDItsystemsITSystem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getITSystemByUUIDItsystemsITSystem
		graphql.NoUnmarshalJSON
	}
	firstPass.getITSystemByUUIDItsystemsITSystem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ITSystemFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetITSystemByUUIDItsystemsITSystem struct {
	Name string `json:"name"`

	System_type string `json:"system_type"`

	Type string `json:"type"`

	User_key string `json:"user_key"`

	Uuid uuid.UUID `json:"uuid"`
}

func (v *getITSystemByUUIDItsystemsITSystem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getITSystemByUUIDItsystemsITSystem) __premarshalJSON() (*__premarshalgetITSystemByUUIDItsystemsITSystem, error) {
	var retval __premarshalgetITSystemByUUIDItsystemsITSystem

	retval.Name = v.ITSystemFields.Name
	retval.System_type = v.ITSystemFields.System_type
	retval.Type = v.ITSystemFields.Type
	retval.User_key = v.ITSystemFields.User_key
	retval.Uuid = v.ITSystemFields.Uuid
	return &retval, nil
}

// getITSystemByUUIDResponse is returned by getITSystemByUUID on success.
type getITSystemByUUIDResponse struct {
	// Get a list of all ITSystems, optionally by uuid(s)
	Itsystems []getITSystemByUUIDItsystemsITSystem `json:"itsystems"`
}

// GetItsystems returns getITSystemByUUIDResponse.Itsystems, and is useful for accessing the field via an interface.
func (v *getITSystemByUUIDResponse) GetItsystems() []getITSystemByUUIDItsystemsITSystem {
	return v.Itsystems
}

// getITSystemByUserKeyItsystemsITSystem includes the requested fields of the GraphQL type ITSystem.
// The GraphQL type's documentation follows.
//
// Systems that IT users are connected to
type getITSystemByUserKeyItsystemsITSystem struct {
	ITSystemFields `json:"-"`
}

// GetName returns getITSystemByUserKeyItsystemsITSystem.Name, and is useful for accessing the field via an interface.
func (v *getITSystemByUserKeyItsystemsITSystem) GetName() string { return v.ITSystemFields.Name }

// GetSystem_type returns getITSystemByUserKeyItsystemsITSystem.System_type, and is useful for accessing the field via an interface.
func (v *getITSystemByUserKeyItsystemsITSystem) GetSystem_type() string {
	return v.ITSystemFields.System_type
}

// GetType returns getITSystemByUserKeyItsystemsITSystem.Type, and is useful for accessing the field via an interface.
func (v *getITSystemByUserKeyItsystemsITSystem) GetType() string { return v.ITSystemFields.Type }

// GetUser_key returns getITSystemByUserKeyItsystemsITSystem.User_key, and is useful for accessing the field via an interface.
func (v *getITSystemByUserKeyItsystemsITSystem) GetUser_key() string {
	return v.ITSystemFields.User_key
}

// GetUuid returns getITSystemByUserKeyItsystemsITSystem.Uuid, and is useful for accessing the field via an interface.
func (v *getITSystemByUserKeyItsystemsITSystem) GetUuid() uuid.UUID { return v.ITSystemFields.Uuid }

func (v *getITSystemByUserKeyItsystemsITSystem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getITSystemByUserKeyItsystemsITSystem
		graphql.NoUnmarshalJSON
	}
	firstPass.getITSystemByUserKeyItsystemsITSystem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ITSystemFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetITSystemByUserKeyItsystemsITSystem struct {
	Name string `json:"name"`

	System_type string `json:"system_type"`

	Type string `json:"type"`

	User_key string `json:"user_key"`

	Uuid uuid.UUID `json:"uuid"`
}

func (v *getITSystemByUserKeyItsystemsITSystem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getITSystemByUserKeyItsystemsITSystem) __premarshalJSON() (*__premarshalgetITSystemByUserKeyItsystemsITSystem, error) {
	var retval __premarshalgetITSystemByUserKeyItsystemsITSystem

	retval.Name = v.ITSystemFields.Name
	retval.System_type = v.ITSystemFields.System_type
	retval.Type = v.ITSystemFields.Type
	retval.User_key = v.ITSystemFields.User_key
	retval.Uuid = v.ITSystemFields.Uuid
	return &retval, nil
}

// getITSystemByUserKeyResponse is returned by getITSystemByUserKey on success.
type getITSystemByUserKeyResponse struct {
	// Get a list of all ITSystems, optionally by uuid(s)
	Itsystems []getITSystemByUserKeyItsystemsITSystem `json:"itsystems"`
}

// GetItsystems returns getITSystemByUserKeyResponse.Itsystems, and is useful for accessing the field via an interface.
func (v *getITSystemByUserKeyResponse) GetItsystems() []getITSystemByUserKeyItsystemsITSystem {
	return v.Itsystems
}

// getITSystemsItsystemsITSystem includes the requested fields of the GraphQL type ITSystem.
// The GraphQL type's documentation follows.
//
// Systems that IT users are connected to
type getITSystemsItsystemsITSystem struct {
	ITSystemFields `json:"-"`
}

// GetName returns getITSystemsItsystemsITSystem.Name, and is useful for accessing the field via an interface.
func (v *getITSystemsItsystemsITSystem) GetName() string { return v.ITSystemFields.Name }

// GetSystem_type returns getITSystemsItsystemsITSystem.System_type, and is useful for accessing the field via an interface.
func (v *getITSystemsItsystemsITSystem) GetSystem_type() string { return v.ITSystemFields.System_type }

// GetType returns getITSystemsItsystemsITSystem.Type, and is useful for accessing the field via an interface.
func (v *getITSystemsItsystemsITSystem) GetType() string { return v.ITSystemFields.Type }

// GetUser_key returns getITSystemsItsystemsITSystem.User_key, and is useful for accessing the field via an interface.
func (v *getITSystemsItsystemsITSystem) GetUser_key() string { return v.ITSystemFields.User_key }

// GetUuid returns getITSystemsItsystemsITSystem.Uuid, and is useful for accessing the field via an interface.
func (v *getITSystemsItsystemsITSystem) GetUuid() uuid.UUID { return v.ITSystemFields.Uuid }

func (v *getITSystemsItsystemsITSystem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getITSystemsItsystemsITSystem
		graphql.NoUnmarshalJSON
	}
	firstPass.getITSystemsItsystemsITSystem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ITSystemFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetITSystemsItsystemsITSystem struct {
	Name string `json:"name"`

	System_type string `json:"system_type"`

	Type string `json:"type"`

	User_key string `json:"user_key"`

	Uuid uuid.UUID `json:"uuid"`
}

func (v *getITSystemsItsystemsITSystem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getITSystemsItsystemsITSystem) __premarshalJSON() (*__premarshalgetITSystemsItsystemsITSystem, error) {
	var retval __premarshalgetITSystemsItsystemsITSystem

	retval.Name = v.ITSystemFields.Name
	retval.System_type = v.ITSystemFields.System_type
	retval.Type = v.ITSystemFields.Type
	retval.User_key = v.ITSystemFields.User_key
	retval.Uuid = v.ITSystemFields.Uuid
	return &retval, nil
}

// getITSystemsResponse is returned by getITSystems on success.
type getITSystemsResponse struct {
	// Get a list of all ITSystems, optionally by uuid(s)
	Itsystems []getITSystemsItsystemsITSystem `json:"itsystems"`
}

// GetItsystems returns getITSystemsResponse.Itsystems, and is useful for accessing the field via an interface.
func (v *getITSystemsResponse) GetItsystems() []getITSystemsItsystemsITSystem { return v.Itsystems }

func getITSystemByUUID(
	client graphql.Client,
	uuid uuid.UUID,
) (*getITSystemByUUIDResponse, error) {
	req := &graphql.Request{
		OpName: "getITSystemByUUID",
		Query: `
query getITSystemByUUID ($uuid: UUID!) {
	itsystems(uuids: [$uuid]) {
		... ITSystemFields
	}
}
fragment ITSystemFields on ITSystem {
	name
	system_type
	type
	user_key
	uuid
}
`,
		Variables: &__getITSystemByUUIDInput{
			Uuid: uuid,
		},
	}
	var err error

	var data getITSystemByUUIDResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		nil,
		req,
		resp,
	)

	return &data, err
}

func getITSystemByUserKey(
	client graphql.Client,
	user_key string,
) (*getITSystemByUserKeyResponse, error) {
	req := &graphql.Request{
		OpName: "getITSystemByUserKey",
		Query: `
query getITSystemByUserKey ($user_key: String!) {
	itsystems(user_keys: [$user_key]) {
		... ITSystemFields
	}
}
fragment ITSystemFields on ITSystem {
	name
	system_type
	type
	user_key
	uuid
}
`,
		Variables: &__getITSystemByUserKeyInput{
			User_key: user_key,
		},
	}
	var err error

	var data getITSystemByUserKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		nil,
		req,
		resp,
	)

	return &data, err
}

func getITSystems(
	client graphql.Client,
) (*getITSystemsResponse, error) {
	req := &graphql.Request{
		OpName: "getITSystems",
		Query: `
query getITSystems {
	itsystems {
		... ITSystemFields
	}
}
fragment ITSystemFields on ITSystem {
	name
	system_type
	type
	user_key
	uuid
}
`,
	}
	var err error

	var data getITSystemsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		nil,
		req,
		resp,
	)

	return &data, err
}
